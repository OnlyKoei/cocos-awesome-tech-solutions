{"version":3,"sources":["file:///E:/cocos/cocos-awesome-tech-solutions/demo/Creator3.6.0_3D_MeshCutter/assets/script/shatter/TouchSplit.ts"],"names":["_decorator","Component","Node","Vec3","Mat4","CameraComponent","geometry","PhysicsSystem","utils","ColliderComponent","BoxColliderComponent","MeshColliderComponent","RigidBodyComponent","MeshRenderer","Mesh","input","Input","FastHull","ccclass","property","TouchSplit","addRig","raycastCount","started","startPos","endPos","near","physicsSystem","instance","start","on","EventType","TOUCH_START","onTouchStart","TOUCH_END","onTouchEnd","touch","cameraCom","set","getLocationX","getLocationY","line","subtract","screenToWorld","splitMeshs","pos","lerp","i","ray","screenPointToRay","x","y","raycast","results","raycastResults","forEach","result","splitPlane","Plane","fromNormalAndPoint","cross","d","normalize","hitPoint","splitNode","collider","node","splitMesh","plane","some","push","l","length","meshRender","getComponent","modelMesh","mesh","readMesh","minPos","minPosition","maxPos","maxPosition","splitCenter","add","multiplyScalar","splitMaterial","sharedMaterial","splitCollider","hull","localPoint","transformMat4","n","invert","worldMatrix","localNormal","getWorldRS","hullArray","Split","meshData","index","MeshUtils","createMesh","calculateBounds","model","addComponent","setMaterial","setScale","scale","setRotation","rotation","setParent","parent","cutOnce","colliderComponent","shape","setCenter","setPosition","multiply","position","negate","destroy"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, Mat4, CameraComponent, geometry, PhysicsSystem, utils, ColliderComponent, BoxColliderComponent, MeshColliderComponent, RigidBodyComponent, MeshRenderer, Mesh, assetManager, resources, Material, input, Input, EventTouch } from 'cc';\r\nimport { FastHull } from './FastHull'\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('TouchSplit')\r\nexport class TouchSplit extends Component {\r\n\r\n    @property(CameraComponent)\r\n    cameraCom: CameraComponent = null!;\r\n\r\n\r\n    @property\r\n    cutOnce: boolean = false;\r\n\r\n    protected addRig: boolean = false;\r\n\r\n    public raycastCount: number = 256;\r\n\r\n    protected started: boolean = false;\r\n    protected startPos: Vec3 = new Vec3();\r\n    protected endPos: Vec3 = new Vec3();\r\n\r\n    protected near: number = 0;\r\n\r\n    protected physicsSystem = PhysicsSystem.instance;\r\n\r\n    start() {\r\n        this.startPos = new Vec3(0, 0, 0);\r\n        this.endPos = new Vec3(0, 0, 0);\r\n\r\n        input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);\r\n        input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\r\n    }\r\n\r\n    onTouchStart(touch: EventTouch) {\r\n\r\n        this.near = this.cameraCom.near;\r\n\r\n        this.startPos.set(touch.getLocationX(), touch.getLocationY(), this.near);\r\n\r\n        this.started = true;\r\n    }\r\n\r\n    onTouchEnd(touch: EventTouch) {\r\n\r\n        if (!this.started) return;\r\n\r\n        this.started = false;\r\n\r\n        this.endPos.set(touch.getLocationX(), touch.getLocationY(), this.near);\r\n\r\n        let line = Vec3.subtract(new Vec3(), this.cameraCom.screenToWorld(this.endPos), this.cameraCom.screenToWorld(this.startPos));\r\n\r\n\r\n        let splitMeshs: any[] = [];\r\n\r\n        for (let i = 0; i < this.raycastCount; i++) {\r\n            let pos = Vec3.lerp(new Vec3(), this.startPos, this.endPos, i / this.raycastCount)\r\n            let ray = this.cameraCom.screenPointToRay(pos.x, pos.y);\r\n\r\n            if (this.physicsSystem.raycast(ray)) {\r\n                let results = this.physicsSystem.raycastResults;\r\n                results.forEach((result) => {\r\n                    let splitPlane = geometry.Plane.fromNormalAndPoint(new geometry.Plane(), Vec3.cross(new Vec3(), line, ray.d).normalize(), result.hitPoint);\r\n                    let splitNode = result.collider.node;\r\n                    let splitMesh = { splitNode: splitNode, plane: splitPlane };\r\n\r\n                    if (!splitMeshs.some((splitMesh) => splitMesh.splitNode == splitNode)) {\r\n                        splitMeshs.push(splitMesh);\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        for (let i = 0, l = splitMeshs.length; i < l; i++) {\r\n            this.splitMesh(splitMeshs[i].splitNode, splitMeshs[i].plane);\r\n        }\r\n\r\n    }\r\n\r\n    splitMesh(splitNode: Node, plane: geometry.Plane) {\r\n        let meshRender = splitNode.getComponent(MeshRenderer);\r\n        let modelMesh = meshRender?.mesh as Mesh;\r\n\r\n        let mesh = utils.readMesh(modelMesh);\r\n\r\n        mesh.minPos = modelMesh.minPosition;\r\n        mesh.maxPos = modelMesh.maxPosition;\r\n\r\n        // let splitSize = Vec3.subtract(new Vec3(), mesh.maxPos as Vec3, mesh.minPos as Vec3);\r\n        let splitCenter = Vec3.add(new Vec3(), mesh.maxPos as Vec3, mesh.minPos as Vec3).multiplyScalar(1 / 2);\r\n        let splitMaterial = meshRender?.sharedMaterial;\r\n        let splitCollider = splitNode.getComponent(ColliderComponent)\r\n\r\n        let hull = new FastHull(mesh);\r\n\r\n\r\n        let localPoint = Vec3.transformMat4(new Vec3(), plane.n.multiplyScalar(plane.d), Mat4.invert(new Mat4(), splitNode.worldMatrix));\r\n        let localNormal = Vec3.transformMat4(new Vec3(), plane.n, Mat4.invert(new Mat4(), splitNode.getWorldRS()));\r\n\r\n        localNormal.normalize();\r\n\r\n        let hullArray = hull.Split(localPoint, localNormal, true);\r\n\r\n        hullArray.forEach((meshData, index) => {\r\n            let mesh = utils.MeshUtils.createMesh(meshData, new Mesh(), { calculateBounds: true });;\r\n            let node = new Node();\r\n            let model = node.addComponent(MeshRenderer);\r\n\r\n            model.mesh = mesh;\r\n\r\n            model.setMaterial(splitMaterial!, 0);\r\n\r\n            node.setScale(splitNode.scale);\r\n\r\n            node.setRotation(splitNode.rotation);\r\n\r\n            node.setParent(this.node.parent);\r\n\r\n            if (!this.cutOnce) {\r\n                if (splitCollider instanceof MeshColliderComponent) {\r\n                    let colliderComponent = node.addComponent(MeshColliderComponent);\r\n                    colliderComponent.mesh = mesh;\r\n                }\r\n                else if (splitCollider instanceof BoxColliderComponent) {\r\n                    let colliderComponent = node.addComponent(BoxColliderComponent);\r\n                    colliderComponent.shape.setCenter(splitCenter);\r\n                }\r\n            }\r\n\r\n            if (this.addRig) {\r\n                node.addComponent(RigidBodyComponent);\r\n            }\r\n            else {\r\n                if (index == 0) {\r\n                    node.setPosition(Vec3.transformMat4(new Vec3(), localNormal, Mat4.invert(new Mat4(), splitNode.getWorldRS())).multiply(splitNode.scale).multiplyScalar(0.2).add(splitNode.position));\r\n                }\r\n                else {\r\n                    node.setPosition(Vec3.transformMat4(new Vec3(), Vec3.negate(new Vec3(), localNormal), Mat4.invert(new Mat4(), splitNode.getWorldRS())).multiply(splitNode.scale).multiplyScalar(0.2).add(splitNode.position));\r\n                }\r\n            }\r\n        })\r\n\r\n        if (hullArray.length > 0) {\r\n            splitNode.destroy();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"]}