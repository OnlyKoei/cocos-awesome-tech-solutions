{"version":3,"sources":["file:///E:/cocos/cocos-awesome-tech-solutions/demo/Creator3.6.0_3D_MeshCutter/assets/script/shatter/TouchSplit.ts"],"names":["_decorator","Component","Node","Vec3","Mat4","systemEvent","SystemEventType","CameraComponent","geometry","PhysicsSystem","utils","ColliderComponent","BoxColliderComponent","MeshColliderComponent","RigidBodyComponent","MeshRenderer","Mesh","FastHull","ccclass","property","TouchSplit","addRig","raycastCount","started","startPos","endPos","near","physicsSystem","instance","start","on","TOUCH_START","onTouchStart","TOUCH_END","onTouchEnd","touch","cameraCom","set","getLocationX","getLocationY","line","subtract","screenToWorld","splitMeshs","i","pos","lerp","ray","screenPointToRay","x","y","raycast","results","raycastResults","forEach","result","splitPlane","plane","fromNormalAndPoint","cross","d","normalize","hitPoint","splitNode","collider","node","splitMesh","some","push","l","length","meshRender","getComponent","modelMesh","mesh","readMesh","minPos","minPosition","maxPos","maxPosition","splitCenter","add","multiplyScalar","splitMaterial","sharedMaterial","splitCollider","hull","localPoint","transformMat4","n","invert","worldMatrix","localNormal","getWorldRS","hullArray","Split","meshData","index","createMesh","calculateBounds","model","addComponent","setMaterial","setScale","scale","setRotation","rotation","setParent","parent","cutOnce","colliderComponent","shape","setCenter","setPosition","multiply","position","negate","destroy"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec2, Vec3, Mat4, systemEvent, SystemEventType, Touch, CameraComponent, geometry, PhysicsSystem, ModelComponent, instantiate, utils, ColliderComponent, BoxColliderComponent, MeshColliderComponent, RigidBodyComponent, MeshRenderer, Mesh, assetManager, resources, Material } from 'cc';\r\nimport { FastHull } from './FastHull'\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('TouchSplit')\r\nexport class TouchSplit extends Component {\r\n\r\n    @property(CameraComponent)\r\n    cameraCom: CameraComponent = null!;\r\n\r\n\r\n    @property\r\n    cutOnce: boolean = false;\r\n\r\n    protected addRig: boolean = false;\r\n\r\n    public raycastCount: number = 256;\r\n\r\n    protected started: boolean = false;\r\n    protected startPos: Vec3 = new Vec3();\r\n    protected endPos: Vec3 = new Vec3();\r\n\r\n    protected near: number = 0;\r\n\r\n    protected physicsSystem = PhysicsSystem.instance;\r\n\r\n    start() {\r\n        this.startPos = new Vec3(0, 0, 0);\r\n        this.endPos = new Vec3(0, 0, 0);\r\n\r\n        systemEvent.on(SystemEventType.TOUCH_START, this.onTouchStart, this);\r\n        systemEvent.on(SystemEventType.TOUCH_END, this.onTouchEnd, this);\r\n    }\r\n\r\n    onTouchStart(touch: Touch) {\r\n\r\n        this.near = this.cameraCom.near;\r\n\r\n        this.startPos.set(touch.getLocationX(), touch.getLocationY(), this.near);\r\n\r\n        this.started = true;\r\n    }\r\n\r\n    onTouchEnd(touch: Touch) {\r\n\r\n        if (!this.started) return;\r\n\r\n        this.started = false;\r\n\r\n        this.endPos.set(touch.getLocationX(), touch.getLocationY(), this.near);\r\n\r\n        let line = Vec3.subtract(new Vec3(), this.cameraCom.screenToWorld(this.endPos), this.cameraCom.screenToWorld(this.startPos));\r\n\r\n\r\n        let splitMeshs: any[] = [];\r\n\r\n        for (let i = 0; i < this.raycastCount; i++) {\r\n            let pos = Vec3.lerp(new Vec3(), this.startPos, this.endPos, i / this.raycastCount)\r\n            let ray = this.cameraCom.screenPointToRay(pos.x, pos.y);\r\n\r\n            if (this.physicsSystem.raycast(ray)) {\r\n                let results = this.physicsSystem.raycastResults;\r\n                results.forEach((result) => {\r\n                    let splitPlane = geometry.plane.fromNormalAndPoint(new geometry.plane(), Vec3.cross(new Vec3(), line, ray.d).normalize(), result.hitPoint);\r\n                    let splitNode = result.collider.node;\r\n                    let splitMesh = { splitNode: splitNode, plane: splitPlane };\r\n\r\n                    if (!splitMeshs.some((splitMesh) => splitMesh.splitNode == splitNode)) {\r\n                        splitMeshs.push(splitMesh);\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        for (let i = 0, l = splitMeshs.length; i < l; i++) {\r\n            this.splitMesh(splitMeshs[i].splitNode, splitMeshs[i].plane);\r\n        }\r\n\r\n    }\r\n\r\n    splitMesh(splitNode: Node, plane: geometry.plane) {\r\n        let meshRender = splitNode.getComponent(MeshRenderer);\r\n        let modelMesh = meshRender?.mesh as Mesh;\r\n\r\n        let mesh = utils.readMesh(modelMesh);\r\n\r\n        mesh.minPos = modelMesh.minPosition;\r\n        mesh.maxPos = modelMesh.maxPosition;\r\n\r\n        // let splitSize = Vec3.subtract(new Vec3(), mesh.maxPos as Vec3, mesh.minPos as Vec3);\r\n        let splitCenter = Vec3.add(new Vec3(), mesh.maxPos as Vec3, mesh.minPos as Vec3).multiplyScalar(1 / 2);\r\n        let splitMaterial = meshRender?.sharedMaterial;\r\n        let splitCollider = splitNode.getComponent(ColliderComponent)\r\n\r\n        let hull = new FastHull(mesh);\r\n\r\n\r\n        let localPoint = Vec3.transformMat4(new Vec3(), plane.n.multiplyScalar(plane.d), Mat4.invert(new Mat4(), splitNode.worldMatrix));\r\n        let localNormal = Vec3.transformMat4(new Vec3(), plane.n, Mat4.invert(new Mat4(), splitNode.getWorldRS()));\r\n\r\n        localNormal.normalize();\r\n\r\n        let hullArray = hull.Split(localPoint, localNormal, true);\r\n\r\n        hullArray.forEach((meshData, index) => {\r\n            let mesh = utils.createMesh(meshData, new Mesh(), { calculateBounds: true });;\r\n            let node = new Node();\r\n            let model = node.addComponent(MeshRenderer);\r\n\r\n            model.mesh = mesh;\r\n\r\n            model.setMaterial(splitMaterial!, 0);\r\n\r\n            node.setScale(splitNode.scale);\r\n\r\n            node.setRotation(splitNode.rotation);\r\n\r\n            node.setParent(this.node.parent);\r\n\r\n            if (!this.cutOnce) {\r\n                if (splitCollider instanceof MeshColliderComponent) {\r\n                    let colliderComponent = node.addComponent(MeshColliderComponent);\r\n                    colliderComponent.mesh = mesh;\r\n                }\r\n                else if (splitCollider instanceof BoxColliderComponent) {\r\n                    let colliderComponent = node.addComponent(BoxColliderComponent);\r\n                    colliderComponent.shape.setCenter(splitCenter);\r\n                }\r\n            }\r\n\r\n            if (this.addRig) {\r\n                node.addComponent(RigidBodyComponent);\r\n            }\r\n            else {\r\n                if (index == 0) {\r\n                    node.setPosition(Vec3.transformMat4(new Vec3(), localNormal, Mat4.invert(new Mat4(), splitNode.getWorldRS())).multiply(splitNode.scale).multiplyScalar(0.2).add(splitNode.position));\r\n                }\r\n                else {\r\n                    node.setPosition(Vec3.transformMat4(new Vec3(), Vec3.negate(new Vec3(), localNormal), Mat4.invert(new Mat4(), splitNode.getWorldRS())).multiply(splitNode.scale).multiplyScalar(0.2).add(splitNode.position));\r\n                }\r\n            }\r\n        })\r\n\r\n        if (hullArray.length > 0) {\r\n            splitNode.destroy();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"]}