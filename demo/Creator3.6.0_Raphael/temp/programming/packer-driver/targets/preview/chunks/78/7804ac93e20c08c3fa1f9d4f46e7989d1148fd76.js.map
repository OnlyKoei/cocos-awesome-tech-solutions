{"version":3,"sources":["file:///E:/cocos/cocos-awesome-tech-solutions/demo/Creator3.6.0_Raphael/assets/raphael/utils/R.dash.ts"],"names":["drawDashPoints","AffineTransform","Vec2","sqrt","Math","drawDashPointsFunc","points","ctx","dashArray","dashOffset","transform","lastx","lasty","dx","dy","totalLength","length","dashLength","dashIndex","from","drawLength","to","x1","y1","x","y","i","l","difLength","p","_tempVec2","transformVec2","moveTo","lineTo"],"mappings":"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","sourcesContent":["\r\nimport { AffineTransform, Vec2 } from \"cc\";\r\n\r\nlet sqrt = Math.sqrt;\r\nexport default class drawDashPoints {\r\n\r\n    drawDashPointsFunc(points, ctx, dashArray, dashOffset, transform) {\r\n        var lastx = points[0],\r\n            lasty = points[1];\r\n\r\n        var dx, dy;\r\n\r\n        var totalLength = 0;\r\n        var length = 0;\r\n\r\n        var dashLength = dashArray.length;\r\n        var dashIndex = 0;\r\n\r\n        var from = dashOffset;\r\n        var drawLength = dashArray[dashIndex];\r\n        var to = dashOffset + drawLength;\r\n\r\n        var x1, y1;\r\n        var x, y;\r\n\r\n        for (var i = 0, l = points.length / 2; i < l; i++) {\r\n            x = points[i * 2];\r\n            y = points[i * 2 + 1];\r\n\r\n            if (i !== 0) {\r\n                dx = x - lastx;\r\n                dy = y - lasty;\r\n\r\n                length = sqrt(dx * dx + dy * dy);\r\n\r\n                if (!x1) x1 = lastx;\r\n                if (!y1) y1 = lasty;\r\n\r\n                while (length > 0) {\r\n                    if (totalLength + length < from) {\r\n                        totalLength += length;\r\n                        length = 0;\r\n\r\n                        x1 = x;\r\n                        y1 = y;\r\n\r\n                        continue;\r\n                    }\r\n\r\n                    if (totalLength <= from) {\r\n                        var difLength = from - totalLength;\r\n                        var p = difLength / length;\r\n\r\n                        x1 = x1 + p * (x - x1);\r\n                        y1 = y1 + p * (y - y1);\r\n\r\n                        if (transform) {\r\n                            let _tempVec2 = new Vec2(0,0);\r\n                            AffineTransform.transformVec2(_tempVec2, x1, y1, transform);\r\n                            ctx.moveTo(_tempVec2.x, _tempVec2.y);\r\n                        }\r\n                        else {\r\n                            ctx.moveTo(x1, y1);\r\n                        }\r\n\r\n                        length -= difLength;\r\n                        totalLength += difLength;\r\n                    }\r\n\r\n                    if ((totalLength + length) < to) {\r\n                        x1 = x;\r\n                        y1 = y;\r\n\r\n                        if (transform) {\r\n                            let _tempVec2 = new Vec2(0,0);\r\n\r\n                            AffineTransform.transformVec2(_tempVec2, x1, y1, transform);\r\n                            ctx.lineTo(_tempVec2.x, _tempVec2.y);\r\n                        }\r\n                        else {\r\n                            ctx.lineTo(x1, y1);\r\n                        }\r\n\r\n                        totalLength += length;\r\n                        length = 0;\r\n                    }\r\n                    else if ((totalLength + length) >= to) {\r\n                        var difLength = to - totalLength;\r\n                        var p = difLength / length;\r\n\r\n                        x1 = x1 + p * (x - x1);\r\n                        y1 = y1 + p * (y - y1);\r\n\r\n                        if (transform) {\r\n                            let _tempVec2 = new Vec2(0,0);\r\n                            AffineTransform.transformVec2(_tempVec2, x1, y1, transform);\r\n                            ctx.lineTo(_tempVec2.x, _tempVec2.y);\r\n                        }\r\n                        else {\r\n                            ctx.lineTo(x1, y1);\r\n                        }\r\n\r\n                        length -= difLength;\r\n                        totalLength += difLength;\r\n\r\n                        from = to + dashArray[++dashIndex % dashLength];\r\n                        to = from + dashArray[++dashIndex % dashLength];\r\n                    }\r\n                }\r\n            }\r\n\r\n            lastx = x;\r\n            lasty = y;\r\n        }\r\n    }\r\n\r\n}"]}