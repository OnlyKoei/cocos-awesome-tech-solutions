{"version":3,"sources":["file:///E:/cocos/cocos-awesome-tech-solutions/demo/Creator3.6.0_Raphael/assets/raphael/RPath.ts"],"names":["_decorator","Component","Node","Graphics","Color","AffineTransform","v2","Vec2","Rect","tesselateBezier","path2curve","drawDashPoints","GlobalUtils","ccclass","property","drawer","M","L","C","Z","sqrt","Math","max","abs","EPSILON","TOLERANCE","LineJoin","LineCap","selectedColor","RPath","_pointArray","_parent","_commands","_dirty","_showHandles","_showBoundingBox","_ctx","_error","_lineWidth","_lineJoin","_lineCap","_strokeColor","_fillColor","_miterLimit","_dashOffset","_dashArray","_transform","a","b","c","d","tx","ty","_worldTransform","_transformDirty","_scale","_position","_rotation","_flipX","_flipY","_time","_duration","_animateDiff","_animating","_fromPath","_toPath","pointArray","value","parent","commands","dirty","showHandles","showBoundingBox","ctx","error","lineWidth","lineJoin","MITER","lineCap","BUTT","strokeColor","RED","fillColor","WHITE","miterLimit","dashOffset","dashArray","Array","isArray","transformDirty","scale","equals","position","rotation","flipX","flipY","time","duration","animateDiff","animating","fromPath","toPath","animateFunc","pathString","pathString2","pathes","prototype","path2curveFunc","diff","i","ii","length","j","jj","_stepAnimate","pos","now","_updateAnimate","dt","_transformCommand","cmd","t","slice","tempPoint","_tempVec2","x","y","transformVec2","getTransform","scaleX","scaleY","positionX","positionY","rotationRadians","sin","cos","sx","sy","getWorldTransform","_tempForm","concat","updateTransform","parentTransformDirty","children","child","init","onLoad","_gNode","addComponent","node","addChild","_applyStyle","ellipse","cx","cy","rx","ry","cmds","push","circle","r","rect","w","h","close","points","closed","clear","lastPoint","point","makePath","path","getPathString","string","join","getTotalLength","totalLength","undefined","_analysis","getBbox","bbox","getWorldBbox","worldBbox","center","add","width","height","_curves","curves","subCurves","subPoints","tessTolSclae","curve","tesselateBezierFunc","lastx","lasty","dx","dy","minx","miny","maxx","maxy","_tempRect","transformRect","_drawCommands","func","apply","_drawHandles","prev","size","half","originLineWidth","originStrokeColor","originFillColor","drawHandle","x1","y1","x2","y2","moveTo","lineTo","stroke","fill","fillRect","_drawDashPath","drawDashPointsFunc","update","getStyledColor","getStyled","type","fromHEX","getDemoData","paths","smoothFunc","knots","forEach","results","getCubicBezierCurvePath","firstControlPoints","secondControlPoints","len","firstControlPoint","secondControlPoint","simplify","fit","fitCubic","sub","normalize","first","last","tan1","tan2","pt1","pt2","dist","mag","addCurve","mulSelf","uPrime","chordLengthParameterize","maxError","split","parametersInOrder","generateBezier","findMaxError","index","reparameterize","V1","V2","tanCenter","div","mul","epsilon","X","l","u","b0","b1","b2","b3","a1","a2","tmp","dot","detC0C1","alpha1","alpha2","detC0X","detXC1","c0","c1","segLength","eps","handle1","handle2","line","findRoot","curve1","curve2","pt","evaluate","df","degree","m","floor","maxDist","P","v","arguments"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, Graphics, Color, AffineTransform, v2, Vec2, Rect } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport tesselateBezier from \"./utils/R.tesselateBezier\";\r\nimport { path2absolute, path2curve } from \"./utils/R.curve\";\r\nimport drawDashPoints from \"./utils/R.dash\";\r\nimport GlobalUtils from './GlobalUtils';\r\nlet drawer = {\r\n    M: 'moveTo',\r\n    L: 'lineTo',\r\n    C: 'bezierCurveTo',\r\n    Z: 'close',\r\n};\r\n\r\nlet sqrt = Math.sqrt;\r\nlet max = Math.max;\r\nlet abs = Math.abs;\r\nlet EPSILON = 1e-12;\r\nlet TOLERANCE = 1e-6;\r\nlet LineJoin = Graphics.LineJoin;\r\nlet LineCap = Graphics.LineCap;\r\nlet selectedColor = new Color(0, 157, 236);\r\n\r\n@ccclass('RPath')\r\nexport class RPath extends Component {\r\n    private _pointArray = [];\r\n    public get pointArray() {\r\n        return this._pointArray;\r\n    }\r\n    public set pointArray(value) {\r\n        this._pointArray = value;\r\n    }\r\n    private _parent = null;\r\n    public get parent() {\r\n        return this._parent;\r\n    }\r\n    public set parent(value) {\r\n        this._parent = value;\r\n    }\r\n    private _commands = [];\r\n    public get commands() {\r\n        return this._commands;\r\n    }\r\n    public set commands(value) {\r\n        this._commands = value;\r\n    }\r\n    private _dirty = false;\r\n    public get dirty() {\r\n        return this._dirty;\r\n    }\r\n    public set dirty(value) {\r\n        this._dirty = value;\r\n    }\r\n    private _showHandles = false;\r\n    public get showHandles() {\r\n        return this._showHandles;\r\n    }\r\n    public set showHandles(value) {\r\n        this._showHandles = value;\r\n    }\r\n    private _showBoundingBox = false;\r\n    public get showBoundingBox() {\r\n        return this._showBoundingBox;\r\n    }\r\n    public set showBoundingBox(value) {\r\n        this._showBoundingBox = value;\r\n    }\r\n    private _ctx = null;\r\n    public get ctx() {\r\n        return this._ctx;\r\n    }\r\n    public set ctx(value) {\r\n        this._ctx = value;\r\n    }\r\n    private _error = null;\r\n    public get error() {\r\n        return this._error;\r\n    }\r\n    public set error(value) {\r\n        this._error = value;\r\n    }\r\n    //R.style ->>>>>>>>>>>>>\r\n    _lineWidth;\r\n    public get lineWidth() {\r\n        return this._lineWidth || 5;\r\n    }\r\n    public set lineWidth(value) {\r\n        this._lineWidth = value;\r\n        this._dirty = true;\r\n    }\r\n    private _lineJoin = null;\r\n    public get lineJoin() {\r\n        return this._lineJoin || LineJoin.MITER;\r\n    }\r\n    public set lineJoin(value) {\r\n        this._lineJoin = value;\r\n        this._dirty = true;\r\n    }\r\n    private _lineCap;\r\n    public get lineCap() {\r\n        return this._lineCap || LineCap.BUTT;\r\n    }\r\n    public set lineCap(value) {\r\n        this._lineCap = value;\r\n        this._dirty = true;\r\n    }\r\n    private _strokeColor;\r\n    public get strokeColor() {\r\n        return this._strokeColor || Color.RED;\r\n    }\r\n    public set strokeColor(value) {\r\n        this._strokeColor = value;\r\n        this._dirty = true;\r\n    }\r\n    private _fillColor;\r\n    public get fillColor() {\r\n        return this._fillColor || Color.WHITE;\r\n    }\r\n    public set fillColor(value) {\r\n        this._fillColor = value;\r\n        this._dirty = true;\r\n\r\n    }\r\n    private _miterLimit;\r\n    public get miterLimit() {\r\n        return this._miterLimit || 10;\r\n    }\r\n    public set miterLimit(value) {\r\n        this._miterLimit = value;\r\n        this._dirty = true;\r\n\r\n    }\r\n    private _dashOffset;\r\n    public get dashOffset() {\r\n        return this._dashOffset || 0;\r\n    }\r\n    public set dashOffset(value) {\r\n        if (this._dashOffset === value) {\r\n            return;\r\n        }\r\n        this._dashOffset = value;\r\n        this._dirty = true;\r\n\r\n    }\r\n    private _dashArray = [];\r\n    public get dashArray() {\r\n        return this._dashArray;\r\n    }\r\n    public set dashArray(value) {\r\n        if (!Array.isArray(value)) {\r\n            return;\r\n        }\r\n        this._dashArray = value;\r\n        this._dirty = true;\r\n\r\n    }\r\n    //R.style ->>>>>>>>>>>>>\r\n\r\n    //R.transform ->>>>>>>>>>>>>>\r\n    _transform = { a: 1, b: 0, c: 0, d: 1, tx: 0, ty: 0 };\r\n    _worldTransform: AffineTransform = { a: 1, b: 0, c: 0, d: 1, tx: 0, ty: 0 };\r\n    private _transformDirty = true;\r\n    public get transformDirty() {\r\n        return this._transformDirty;\r\n    }\r\n    public set transformDirty(value) {\r\n        if (this.transformDirty) {\r\n            if (this.parent) {\r\n                this.parent.transformDirty = true;\r\n            }\r\n\r\n            this._dirty = true;\r\n        }\r\n    }\r\n    private _scale: Vec2 = new Vec2(1, 1);\r\n    public get scale() {\r\n        return this._scale;\r\n    }\r\n    public set scale(value) {\r\n        if (this._scale.equals(value)) {\r\n            return;\r\n        }\r\n        this._scale = value;\r\n        this.transformDirty = true;\r\n    }\r\n\r\n    private _position: Vec2 = new Vec2(0, 0);\r\n    public get position() {\r\n        return this._position;\r\n    }\r\n    public set position(value) {\r\n        if (this._position.equals(value)) {\r\n            return;\r\n        }\r\n        this._position = value;\r\n        this.transformDirty = true;\r\n    }\r\n    private _rotation = 0;\r\n    public get rotation() {\r\n        return this._rotation;\r\n    }\r\n    public set rotation(value) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n        this._rotation = value;\r\n        this.transformDirty = true;\r\n    }\r\n    private _flipX: false;\r\n    public get flipX(): false {\r\n        return this._flipX;\r\n    }\r\n    public set flipX(value: false) {\r\n        if (this._flipX === value) {\r\n            return;\r\n        }\r\n        this._flipX = value;\r\n        this.transformDirty = true;\r\n    }\r\n    private _flipY: false;\r\n    public get flipY(): false {\r\n        return this._flipY;\r\n    }\r\n    public set flipY(value: false) {\r\n        if (this._flipY === value) {\r\n            return;\r\n        }\r\n        this._flipY = value;\r\n        this.transformDirty = true;\r\n    }\r\n    //R.transform ->>>>>>>>>>>>>>>>>>\r\n\r\n    //R.animate ->>>>>>>>>>>>>>>>>\r\n    private _time = 0;\r\n    public get time() {\r\n        return this._time;\r\n    }\r\n    public set time(value) {\r\n        this._time = value;\r\n    }\r\n    private _duration = 0;\r\n    public get duration() {\r\n        return this._duration;\r\n    }\r\n    public set duration(value) {\r\n        this._duration = value;\r\n    }\r\n\r\n    private _animateDiff = null;\r\n    public get animateDiff() {\r\n        return this._animateDiff;\r\n    }\r\n    public set animateDiff(value) {\r\n        this._animateDiff = value;\r\n    }\r\n\r\n    private _animating = null;\r\n    public get animating() {\r\n        return this._animating;\r\n    }\r\n    public set animating(value) {\r\n        this._animating = value;\r\n    }\r\n\r\n    private _fromPath = null;\r\n    public get fromPath() {\r\n        return this._fromPath;\r\n    }\r\n    public set fromPath(value) {\r\n        this._fromPath = value;\r\n    }\r\n    private _toPath = null;\r\n    public get toPath() {\r\n        return this._toPath;\r\n    }\r\n    public set toPath(value) {\r\n        this._toPath = value;\r\n    }\r\n    //R.animate ->>>>>>>>>>>>>>>>>\r\n    animateFunc(pathString, pathString2, duration, animating) {\r\n        var pathes = path2curve.prototype.path2curveFunc(pathString, pathString2),\r\n            fromPath = pathes[0],\r\n            toPath = pathes[1];\r\n\r\n        var diff = [];\r\n        for (var i = 0, ii = fromPath.length; i < ii; i++) {\r\n            diff[i] = [0];\r\n            for (var j = 1, jj = fromPath[i].length; j < jj; j++) {\r\n                diff[i][j] = (toPath[i][j] - fromPath[i][j]) / duration;\r\n            }\r\n        }\r\n\r\n        this._time = 0;\r\n        this._duration = duration;\r\n\r\n        this._animateDiff = diff;\r\n        this._animating = typeof animating === 'undefined' ? true : animating;\r\n\r\n        this._fromPath = fromPath;\r\n        this._toPath = toPath;\r\n\r\n        return diff;\r\n    }\r\n\r\n    _stepAnimate(time) {\r\n        var diff = this._animateDiff;\r\n        var duration = this._duration;\r\n        var fromPath = this._fromPath;\r\n\r\n        var pos = time / duration;\r\n\r\n        if (pos > 1) pos = 1;\r\n\r\n        var now = [];\r\n        for (var i = 0, ii = fromPath.length; i < ii; i++) {\r\n            now[i] = [fromPath[i][0]];\r\n            for (var j = 1, jj = fromPath[i].length; j < jj; j++) {\r\n                now[i][j] = +fromPath[i][j] + pos * duration * diff[i][j];\r\n            }\r\n        }\r\n\r\n        this._dirty = true;\r\n        this._commands = now;\r\n\r\n        if (pos >= 1) {\r\n            this._animating = false;\r\n            this._fromPath = null;\r\n            this._toPath = null;\r\n        }\r\n    }\r\n\r\n    _updateAnimate(dt) {\r\n        if (this._animating) {\r\n            this._time += dt;\r\n            this._stepAnimate(this._time);\r\n        }\r\n    }\r\n\r\n    public _transformCommand(cmd, t) {\r\n        if (cmd.length <= 1) {\r\n            return cmd;\r\n        }\r\n\r\n        cmd = cmd.slice(1, cmd.length);\r\n\r\n        if (t.a === 1 && t.d === 1 &&\r\n            t.b === 0 && t.c === 0 &&\r\n            t.tx === 0 && t.ty === 0) {\r\n            return cmd;\r\n        }\r\n\r\n        var tempPoint = new Vec2();\r\n        let _tempVec2 = new Vec2();\r\n        for (var i = 0, ii = cmd.length / 2; i < ii; i++) {\r\n            var j = i * 2;\r\n            tempPoint.x = cmd[j];\r\n            tempPoint.y = cmd[j + 1];\r\n\r\n            AffineTransform.transformVec2(_tempVec2, tempPoint, t);\r\n\r\n            cmd[j] = _tempVec2.x;\r\n            cmd[j + 1] = _tempVec2.y;\r\n        }\r\n\r\n        return cmd;\r\n    }\r\n\r\n    getTransform() {\r\n        if (this.transformDirty) {\r\n            var scaleX = this.flipX ? -this._scale.x : this._scale.x;\r\n            var scaleY = this.flipY ? -this._scale.y : this._scale.y;\r\n            var positionX = this._position.x;\r\n            var positionY = this._position.y;\r\n            var rotation = this._rotation;\r\n\r\n            var t = this._transform;\r\n            t.tx = positionX;\r\n            t.ty = positionY;\r\n            t.a = t.d = 1;\r\n            t.b = t.c = 0;\r\n\r\n            // rotation Cos and Sin\r\n            if (rotation) {\r\n                var rotationRadians = rotation * 0.017453292519943295;  //0.017453292519943295 = (Math.PI / 180);   for performance\r\n                t.c = Math.sin(rotationRadians);\r\n                t.d = Math.cos(rotationRadians);\r\n                t.a = t.d;\r\n                t.b = -t.c;\r\n            }\r\n\r\n            // Firefox on Vista and XP crashes\r\n            // GPU thread in case of scale(0.0, 0.0)\r\n            var sx = (scaleX < 0.000001 && scaleX > -0.000001) ? 0.000001 : scaleX,\r\n                sy = (scaleY < 0.000001 && scaleY > -0.000001) ? 0.000001 : scaleY;\r\n\r\n            // scale\r\n            if (scaleX !== 1 || scaleY !== 1) {\r\n                t.a *= sx;\r\n                t.b *= sx;\r\n                t.c *= sy;\r\n                t.d *= sy;\r\n            }\r\n\r\n            this.transformDirty = false;\r\n        }\r\n\r\n        return this._transform;\r\n    }\r\n\r\n    getWorldTransform() {\r\n        if (this.parent) {\r\n            let _tempForm = new AffineTransform()\r\n            AffineTransform.concat(_tempForm, this.parent.getWorldTransform(), this.getTransform());\r\n            return _tempForm;\r\n        }\r\n\r\n        return this.getTransform();\r\n    }\r\n\r\n    updateTransform(parentTransformDirty) {\r\n        if (this.transformDirty || parentTransformDirty) {\r\n            var scaleX = this.flipX ? -this._scale.x : this._scale.x;\r\n            var scaleY = this.flipY ? -this._scale.y : this._scale.y;\r\n            var positionX = this._position.x;\r\n            var positionY = this._position.y;\r\n            var rotation = this._rotation;\r\n\r\n            var t = this._transform;\r\n            t.tx = positionX;\r\n            t.ty = positionY;\r\n            t.a = t.d = 1;\r\n            t.b = t.c = 0;\r\n\r\n            // rotation Cos and Sin\r\n            if (rotation) {\r\n                var rotationRadians = rotation * 0.017453292519943295;  //0.017453292519943295 = (Math.PI / 180);   for performance\r\n                t.c = Math.sin(rotationRadians);\r\n                t.d = Math.cos(rotationRadians);\r\n                t.a = t.d;\r\n                t.b = -t.c;\r\n            }\r\n\r\n            // Firefox on Vista and XP crashes\r\n            // GPU thread in case of scale(0.0, 0.0)\r\n            var sx = (scaleX < 0.000001 && scaleX > -0.000001) ? 0.000001 : scaleX,\r\n                sy = (scaleY < 0.000001 && scaleY > -0.000001) ? 0.000001 : scaleY;\r\n\r\n            // scale\r\n            if (scaleX !== 1 || scaleY !== 1) {\r\n                t.a *= sx;\r\n                t.b *= sx;\r\n                t.c *= sy;\r\n                t.d *= sy;\r\n            }\r\n        }\r\n\r\n        if (this.parent) {\r\n            let _tempForm = new AffineTransform()\r\n            AffineTransform.concat(new AffineTransform(), this.parent._worldTransform, this._transform);\r\n            this._worldTransform = _tempForm;\r\n        }\r\n        else {\r\n            this._worldTransform = this._transform;\r\n        }\r\n\r\n        var children = this.children;\r\n        if (children) {\r\n            for (var i = 0, ii = children.length; i < ii; i++) {\r\n                var child = children[i];\r\n                child.updateTransform(parentTransformDirty || this.transformDirty);\r\n            }\r\n        }\r\n\r\n        this.transformDirty = false;\r\n    }\r\n    init(parent) {\r\n        if (parent) {\r\n            this.parent = parent;\r\n            this.ctx = parent.ctx;\r\n        }\r\n        this._commands = [];\r\n        this._dirty = true;\r\n        this.showHandles = false;\r\n        this.showBoundingBox = false;\r\n    }\r\n    onLoad() {\r\n        this.init(null);\r\n        if (!this.ctx) {\r\n            let _gNode = new Node();\r\n            this.ctx = _gNode.addComponent(Graphics);\r\n            this.node.addChild(_gNode);\r\n            this._applyStyle();\r\n        }\r\n    }\r\n    ellipse(cx, cy, rx, ry) {\r\n        if (!ry) {\r\n            ry = rx;\r\n        }\r\n        let cmds = this._commands;\r\n        cmds.push(['M', cx, cy]);\r\n        cmds.push(['m', 0, -ry]);\r\n        cmds.push(['a', rx, ry, 0, 1, 1, 0, 2 * ry]);\r\n        cmds.push(['a', rx, ry, 0, 1, 1, 0, -2 * ry]);\r\n    }\r\n    circle(cx, cy, r) {\r\n        this.ellipse(cx, cy, r,null);\r\n    }\r\n    rect(x, y, w, h, r) {\r\n        let cmds = this._commands;\r\n        if (r) {\r\n            cmds.push(['M', x + r, y]);\r\n            cmds.push(['l', w - r * 2, 0]);\r\n            cmds.push(['a', r, r, 0, 0, 1, r, r]);\r\n            cmds.push(['l', 0, h - r * 2]);\r\n            cmds.push(['a', r, r, 0, 0, 1, -r, r]);\r\n            cmds.push(['l', r * 2 - w, 0]);\r\n            cmds.push(['a', r, r, 0, 0, 1, -r, -r]);\r\n            cmds.push(['l', 0, r * 2 - h]);\r\n            cmds.push(['a', r, r, 0, 0, 1, r, -r]);\r\n        }\r\n        else {\r\n            cmds.push(['M', x, y]);\r\n            cmds.push(['l', w, 0]);\r\n            cmds.push(['l', 0, h]);\r\n            cmds.push(['l', -w, 0]);\r\n        }\r\n        cmds.push(['z']);\r\n    }\r\n    close() {\r\n        this._commands.push(['Z']);\r\n    }\r\n    points(points, closed) {\r\n        if (points.length <= 1) {\r\n            return;\r\n        }\r\n        this.clear();\r\n        let lastPoint = points[0];\r\n        this.M(lastPoint.x, lastPoint.y);\r\n        for (let i = 1, ii = points.length; i < ii; i++) {\r\n            let point = points[i];\r\n            this.C(lastPoint.x, lastPoint.y, point.x, point.y, point.x, point.y);\r\n            lastPoint = point;\r\n        }\r\n        if (closed) {\r\n            this.C(lastPoint.x, lastPoint.y, points[0].x, points[0].y, points[0].x, points[0].y);\r\n        }\r\n        this.makePath();\r\n    }\r\n    makePath() {\r\n        // console.log(this._commands, ' this._commands')\r\n        this._commands = path2curve.prototype.path2curveFunc(this._commands, null);\r\n        this._dirty = true;\r\n    }\r\n    path(path) {\r\n        this._commands = path2curve.prototype.path2curveFunc(path, null);\r\n        this._dirty = true;\r\n    }\r\n    clear() {\r\n        this._commands.length = 0;\r\n    }\r\n    getPathString() {\r\n        let commands = this._commands;\r\n        let string = [];\r\n        for (let i = 0, ii = commands.length; i < ii; i++) {\r\n            string[i] = commands[i].join(' ');\r\n        }\r\n        string = string.join(' ');\r\n        return string;\r\n    }\r\n    getTotalLength() {\r\n        if (this._commands.totalLength === undefined) {\r\n            this._analysis();\r\n        }\r\n        return this._commands.totalLength;\r\n    }\r\n    getBbox() {\r\n        if (this._commands.bbox === undefined) {\r\n            this._analysis();\r\n        }\r\n        return this._commands.bbox;\r\n    }\r\n    getWorldBbox() {\r\n        if (this._commands.worldBbox === undefined || this.transformDirty) {\r\n            this._analysis();\r\n        }\r\n        return this._commands.worldBbox;\r\n    }\r\n    center(x, y) {\r\n        x = x || 0;\r\n        y = y || 0;\r\n        let bbox = this.getBbox();\r\n        this.position = this.position.add(v2(-bbox.width / 2 - bbox.x + x, -bbox.height / 2 - bbox.y + y));\r\n    }\r\n    _curves() {\r\n        let cmds = this._commands;\r\n        if (cmds.curves) return cmds.curves;\r\n        let curves = [];\r\n        let subCurves;\r\n        let x, y;\r\n        for (let i = 0, ii = cmds.length; i < ii; i++) {\r\n            let cmd = cmds[i];\r\n            let c = cmd[0];\r\n            if (c === 'M') {\r\n                subCurves = [];\r\n                curves.push(subCurves);\r\n                x = cmd[1];\r\n                y = cmd[2];\r\n            }\r\n            else if (c === 'C' && x !== undefined && y !== undefined) {\r\n                subCurves.push([x, y, cmd[1], cmd[2], cmd[3], cmd[4], cmd[5], cmd[6]]);\r\n                x = cmd[5];\r\n                y = cmd[6];\r\n            }\r\n        }\r\n        cmds.curves = curves;\r\n        return curves;\r\n    }\r\n    _analysis() {\r\n        let cmds = this._commands;\r\n        if (cmds.points) {\r\n            return;\r\n        }\r\n        let curves = this._curves();\r\n        let points = [];\r\n        let x, y;\r\n        let subPoints;\r\n        let tessTolSclae = 1 / max(abs(this.scale.x), abs(this.scale.y));\r\n        for (var i = 0, ii = curves.length; i < ii; i++) {\r\n            let subCurves = curves[i];\r\n            subPoints = [];\r\n            points.push(subPoints);\r\n            for (var j = 0, jj = subCurves.length; j < jj; j++) {\r\n                let curve = subCurves[j];\r\n                tesselateBezier.prototype.tesselateBezierFunc(curve[0], curve[1], curve[2], curve[3], curve[4], curve[5], curve[6], curve[7], 0, subPoints, tessTolSclae);\r\n            }\r\n        }\r\n        cmds.points = points;\r\n        let totalLength = 0;\r\n        let lastx, lasty;\r\n        let dx, dy;\r\n        let minx = 10e7, miny = 10e7,\r\n            maxx = -10e7, maxy = -10e7;\r\n        for (let i = 0, ii = points.length; i < ii; i++) {\r\n            subPoints = points[i];\r\n            for (let j = 0, jj = subPoints.length / 2; j < jj; j++) {\r\n                x = subPoints[j * 2];\r\n                y = subPoints[j * 2 + 1];\r\n                if (x < minx) minx = x;\r\n                if (x > maxx) maxx = x;\r\n                if (y < miny) miny = y;\r\n                if (y > maxy) maxy = y;\r\n                if (j === 0) {\r\n                    lastx = x;\r\n                    lasty = y;\r\n                }\r\n                dx = x - lastx;\r\n                dy = y - lasty;\r\n                totalLength += sqrt(dx * dx + dy * dy);\r\n                lastx = x;\r\n                lasty = y;\r\n            }\r\n        }\r\n        cmds.totalLength = totalLength;\r\n        if (totalLength === 0) {\r\n            cmds.bbox = cmds.worldBbox = this.rect();\r\n        }\r\n        else {\r\n            let rect = new Rect(minx, miny, maxx - minx, maxy - miny);\r\n            let _tempRect = new Rect();\r\n            AffineTransform.transformRect(_tempRect, rect, this.getTransform());\r\n            cmds.bbox = _tempRect;\r\n            AffineTransform.transformRect(_tempRect, rect, this.getWorldTransform());\r\n            cmds.worldBbox = _tempRect\r\n        }\r\n    }\r\n    _drawCommands() {\r\n        let commands = this._commands;\r\n        let ctx = this.ctx;\r\n        let t = this.getWorldTransform();\r\n        for (let i = 0, ii = commands.length; i < ii; i++) {\r\n            let cmd = commands[i];\r\n            let c = cmd[0];\r\n            cmd = this._transformCommand(cmd, t);\r\n            let func = ctx[drawer[c]];\r\n            if (func) func.apply(ctx, cmd);\r\n        }\r\n    }\r\n    _drawHandles() {\r\n        let ctx = this.ctx;\r\n        let commands = this._commands;\r\n        let prev;\r\n        let size = 5;\r\n        let half = size / 2;\r\n        let originLineWidth = ctx.lineWidth;\r\n        let originStrokeColor = ctx.strokeColor;\r\n        let originFillColor = ctx.fillColor;\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeColor = selectedColor;\r\n        ctx.fillColor = selectedColor;\r\n        let t = this.getWorldTransform();\r\n        function drawHandle(x1, y1, x2, y2) {\r\n            ctx.moveTo(x1, y1);\r\n            ctx.lineTo(x2, y2);\r\n            ctx.stroke();\r\n            ctx.circle(x2, y2, half);\r\n            ctx.fill();\r\n        }\r\n        for (let i = 0, ii = commands.length; i < ii; i++) {\r\n            let cmd = commands[i];\r\n            let c = cmd[0];\r\n            cmd = this._transformCommand(cmd, t);\r\n            if (c === 'M') {\r\n                prev = cmd;\r\n            }\r\n            else if (c === 'C') {\r\n                drawHandle(prev[0], prev[1], cmd[0], cmd[1]);\r\n                drawHandle(cmd[4], cmd[5], cmd[2], cmd[3]);\r\n                prev = [cmd[4], cmd[5]];\r\n            }\r\n            if (prev)\r\n                ctx.fillRect(prev[0] - half, prev[1] - half, size, size);\r\n        }\r\n        ctx.lineWidth = originLineWidth;\r\n        ctx.strokeColor = originStrokeColor;\r\n        ctx.fillColor = originFillColor;\r\n    }\r\n    _drawDashPath() {\r\n        let cmds = this._commands;\r\n        let ctx = this.ctx;\r\n        let dashArray = this.dashArray;\r\n        let dashOffset = this.dashOffset;\r\n        let points;\r\n        if (!cmds.points) {\r\n            this._analysis();\r\n        }\r\n        points = cmds.points;\r\n        let t = this.getWorldTransform();\r\n        for (let i = 0, ii = points.length; i < ii; i++) {\r\n            let subPoints = points[i];\r\n            drawDashPoints.prototype.drawDashPointsFunc(subPoints, ctx, dashArray, dashOffset, t);\r\n        }\r\n    }\r\n    update(dt) {\r\n        if (this._updateAnimate) {\r\n            this._updateAnimate(dt);\r\n        }\r\n        if (this._commands.length === 0 || !this._dirty || (this.parent && !this.parent._dirty)) {\r\n            return;\r\n        }\r\n        this._applyStyle();\r\n        if (!this.parent) {\r\n            this.ctx.clear();\r\n        }\r\n        if (this.dashArray.length > 0) {\r\n            if (this.getStyledColor('fillColor')) {\r\n                this._drawCommands();\r\n                this.ctx.fill();\r\n            }\r\n            if (this.getStyledColor('strokeColor')) {\r\n                this._drawDashPath();\r\n                this.ctx.stroke();\r\n            }\r\n        }\r\n        else {\r\n            this._drawCommands();\r\n            if (this.getStyledColor('fillColor')) this.ctx.fill();\r\n            if (this.getStyledColor('strokeColor')) this.ctx.stroke();\r\n        }\r\n        if (this.showBoundingBox) {\r\n            let bbox = this.getWorldBbox();\r\n            this.ctx.rect(bbox.x, bbox.y, bbox.width, bbox.height);\r\n            this.ctx.stroke();\r\n        }\r\n        if (this.showHandles) this._drawHandles();\r\n        this._dirty = false;\r\n    }\r\n\r\n\r\n    getStyled(type) {\r\n        var value = this['_' + type];\r\n\r\n        if (value === 'inherit' || value === undefined) {\r\n            // console.log(this.parent, ' 11111')\r\n            if (this.parent) value = this.parent.getStyled(type);\r\n            else value = this[type];\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    getStyledColor(type) {\r\n        var value = this.getStyled(type);\r\n\r\n        if (value === 'none' || !value) {\r\n            value = null;\r\n        }\r\n        else if (typeof value === 'string') {\r\n            value = new Color().fromHEX(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    _applyStyle() {\r\n        let ctx = this.ctx;\r\n        // console.log(this.getStyled('lineWidth'),' this.getStyled()')\r\n        // 默认是 1，看不清，固写死测试\r\n        ctx.lineWidth = this.getStyled('lineWidth');\r\n        ctx.lineJoin = this.getStyled('lineJoin');\r\n        ctx.lineCap = this.getStyled('lineCap');\r\n\r\n        let strokeColor = this.getStyledColor('strokeColor');\r\n        let fillColor = this.getStyledColor('fillColor');\r\n\r\n        if (strokeColor)\r\n            ctx.strokeColor = strokeColor;\r\n        if (fillColor)\r\n            ctx.fillColor = fillColor;\r\n    }\r\n    getDemoData() {\r\n        return GlobalUtils.paths;\r\n    }\r\n    // R.smooth ->>>>>\r\n    smoothFunc() {\r\n        var knots = [];\r\n        this._commands.forEach(function (cmd) {\r\n            var c = cmd[0];\r\n\r\n            if (c === 'M') {\r\n                knots.push(new Vec2(cmd[1], cmd[2]));\r\n            }\r\n            else if (c === 'C') {\r\n                knots.push(new Vec2(cmd[5], cmd[6]));\r\n            }\r\n        });\r\n\r\n        var results = GlobalUtils.prototype.getCubicBezierCurvePath(knots);\r\n        var firstControlPoints = results[0];\r\n        var secondControlPoints = results[1];\r\n        var commands = [];\r\n\r\n        for (var i = 0, len = knots.length; i < len; i++) {\r\n            if (i === 0) {\r\n                commands.push(['M', knots[i].x, knots[i].y]);\r\n            } else {\r\n                var firstControlPoint = firstControlPoints[i - 1],\r\n                    secondControlPoint = secondControlPoints[i - 1];\r\n\r\n                commands.push([\r\n                    'C',\r\n                    firstControlPoint.x, firstControlPoint.y,\r\n                    secondControlPoint.x, secondControlPoint.y,\r\n                    knots[i].x, knots[i].y\r\n                ]);\r\n            }\r\n        }\r\n\r\n        this._commands = commands;\r\n        this._dirty = true;\r\n    }\r\n\r\n    simplify() {\r\n        this.commands = this.fit(this);\r\n    }\r\n    // R.simplify ->>>>>>\r\n    fit(path, error) {\r\n        this.commands = [];\r\n        this.error = error || 10;\r\n\r\n        let points = this.pointArray = [];\r\n        path._commands.forEach(function (cmd) {\r\n            let c = cmd[0];\r\n\r\n            if (c === 'M') {\r\n                points.push(new Vec2(cmd[1], cmd[2]));\r\n            }\r\n            else if (c === 'C') {\r\n                points.push(new Vec2(cmd[5], cmd[6]));\r\n            }\r\n        });\r\n\r\n\r\n        let length = points.length;\r\n\r\n        if (length > 1) {\r\n            this.fitCubic(0, length - 1,\r\n                // Left Tangent\r\n                points[1].sub(points[0]).normalize(),\r\n                // Right Tangent\r\n                points[length - 2].sub(points[length - 1]).normalize());\r\n        }\r\n\r\n        return this.commands;\r\n    }\r\n\r\n    // Fit a Bezier curve to a (sub)set of digitized points\r\n    fitCubic(first, last, tan1, tan2) {\r\n        //  Use heuristic if region only has two points in it\r\n        if (last - first === 1) {\r\n            let pt1 = this.pointArray[first],\r\n                pt2 = this.pointArray[last],\r\n                dist = pt1.sub(pt2).mag() / 3;\r\n            this.addCurve([pt1, pt1.add(tan1.normalize().mulSelf(dist)),\r\n                pt2.add(tan2.normalize().mulSelf(dist)), pt2]);\r\n            return;\r\n        }\r\n        // Parameterize points, and attempt to fit curve\r\n        let uPrime = this.chordLengthParameterize(first, last),\r\n            maxError = Math.max(this.error, this.error * this.error),\r\n            split,\r\n            parametersInOrder = true;\r\n        // Try 4 iterations\r\n        for (let i = 0; i <= 4; i++) {\r\n            let curve = this.generateBezier(first, last, uPrime, tan1, tan2);\r\n            //  Find max deviation of points to fitted curve\r\n            let max = this.findMaxError(first, last, curve, uPrime);\r\n            if (max.error < this.error && parametersInOrder) {\r\n                this.addCurve(curve);\r\n                return;\r\n            }\r\n            split = max.index;\r\n            // If error not too large, try reparameterization and iteration\r\n            if (max.error >= maxError)\r\n                break;\r\n            parametersInOrder = this.reparameterize(first, last, uPrime, curve);\r\n            maxError = max.error;\r\n        }\r\n        // Fitting failed -- split at max error point and fit recursively\r\n        let V1 = this.pointArray[split - 1].sub(this.pointArray[split]),\r\n            V2 = this.pointArray[split].sub(this.pointArray[split + 1]),\r\n            tanCenter = V1.add(V2).div(2).normalize();\r\n        this.fitCubic(first, split, tan1, tanCenter);\r\n        this.fitCubic(split, last, tanCenter.mul(-1), tan2);\r\n    }\r\n\r\n    addCurve(curve) {\r\n        if (this.commands.length === 0) {\r\n            this.commands.push(['M', curve[0].x, curve[0].y]);\r\n        }\r\n        else {\r\n            let cmd = this.commands[this.commands.length - 1];\r\n            cmd[5] = curve[0].x;\r\n            cmd[6] = curve[0].y;\r\n        }\r\n\r\n        this.commands.push(['C', curve[1].x, curve[1].y, curve[2].x, curve[2].y, curve[3].x, curve[3].y]);\r\n    }\r\n\r\n    // Use least-squares method to find Bezier control points for region.\r\n    generateBezier(first, last, uPrime, tan1, tan2) {\r\n        let epsilon = /*#=*/EPSILON,\r\n            pt1 = this.pointArray[first],\r\n            pt2 = this.pointArray[last],\r\n            // Create the C and X matrices\r\n            C = [[0, 0], [0, 0]],\r\n            X = [0, 0];\r\n\r\n        for (let i = 0, l = last - first + 1; i < l; i++) {\r\n            let u = uPrime[i],\r\n                t = 1 - u,\r\n                b = 3 * u * t,\r\n                b0 = t * t * t,\r\n                b1 = b * t,\r\n                b2 = b * u,\r\n                b3 = u * u * u,\r\n                a1 = tan1.normalize().mulSelf(b1),\r\n                a2 = tan2.normalize().mulSelf(b2),\r\n                tmp = this.pointArray[first + i]\r\n                    .sub(pt1.mul(b0 + b1))\r\n                    .sub(pt2.mul(b2 + b3));\r\n            C[0][0] += a1.dot(a1);\r\n            C[0][1] += a1.dot(a2);\r\n            // C[1][0] += a1.dot(a2);\r\n            C[1][0] = C[0][1];\r\n            C[1][1] += a2.dot(a2);\r\n            X[0] += a1.dot(tmp);\r\n            X[1] += a2.dot(tmp);\r\n        }\r\n\r\n        // Compute the determinants of C and X\r\n        let detC0C1 = C[0][0] * C[1][1] - C[1][0] * C[0][1],\r\n            alpha1, alpha2;\r\n        if (Math.abs(detC0C1) > epsilon) {\r\n            // Kramer's rule\r\n            let detC0X = C[0][0] * X[1] - C[1][0] * X[0],\r\n                detXC1 = X[0] * C[1][1] - X[1] * C[0][1];\r\n            // Derive alpha values\r\n            alpha1 = detXC1 / detC0C1;\r\n            alpha2 = detC0X / detC0C1;\r\n        } else {\r\n            // Matrix is under-determined, try assuming alpha1 == alpha2\r\n            let c0 = C[0][0] + C[0][1],\r\n                c1 = C[1][0] + C[1][1];\r\n            if (Math.abs(c0) > epsilon) {\r\n                alpha1 = alpha2 = X[0] / c0;\r\n            } else if (Math.abs(c1) > epsilon) {\r\n                alpha1 = alpha2 = X[1] / c1;\r\n            } else {\r\n                // Handle below\r\n                alpha1 = alpha2 = 0;\r\n            }\r\n        }\r\n\r\n        // If alpha negative, use the Wu/Barsky heuristic (see text)\r\n        // (if alpha is 0, you get coincident control points that lead to\r\n        // divide by zero in any subsequent NewtonRaphsonRootFind() call.\r\n        let segLength = pt2.sub(pt1).mag(),\r\n            eps = epsilon * segLength,\r\n            handle1,\r\n            handle2;\r\n        if (alpha1 < eps || alpha2 < eps) {\r\n            // fall back on standard (probably inaccurate) formula,\r\n            // and subdivide further if needed.\r\n            alpha1 = alpha2 = segLength / 3;\r\n        } else {\r\n            // Check if the found control points are in the right order when\r\n            // projected onto the line through pt1 and pt2.\r\n            let line = pt2.sub(pt1);\r\n            // Control points 1 and 2 are positioned an alpha distance out\r\n            // on the tangent vectors, left and right, respectively\r\n            handle1 = tan1.normalize().mulSelf(alpha1);\r\n            handle2 = tan2.normalize().mulSelf(alpha2);\r\n            if (handle1.dot(line) - handle2.dot(line) > segLength * segLength) {\r\n                // Fall back to the Wu/Barsky heuristic above.\r\n                alpha1 = alpha2 = segLength / 3;\r\n                handle1 = handle2 = null; // Force recalculation\r\n            }\r\n        }\r\n\r\n        // First and last control points of the Bezier curve are\r\n        // positioned exactly at the first and last data points\r\n        return [pt1, pt1.add(handle1 || tan1.normalize().mulSelf(alpha1)),\r\n            pt2.add(handle2 || tan2.normalize().mulSelf(alpha2)), pt2];\r\n    }\r\n\r\n    // Given set of points and their parameterization, try to find\r\n    // a better parameterization.\r\n    reparameterize(first, last, u, curve) {\r\n        for (let i = first; i <= last; i++) {\r\n            u[i - first] = this.findRoot(curve, this.pointArray[i], u[i - first]);\r\n        }\r\n        // Detect if the new parameterization has reordered the points.\r\n        // In that case, we would fit the points of the path in the wrong order.\r\n        for (let i = 1, l = u.length; i < l; i++) {\r\n            if (u[i] <= u[i - 1])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Use Newton-Raphson iteration to find better root.\r\n    findRoot(curve, point, u) {\r\n        let curve1 = [],\r\n            curve2 = [];\r\n        // Generate control vertices for Q'\r\n        for (let i = 0; i <= 2; i++) {\r\n            curve1[i] = curve[i + 1].sub(curve[i]).mul(3);\r\n        }\r\n        // Generate control vertices for Q''\r\n        for (let i = 0; i <= 1; i++) {\r\n            curve2[i] = curve1[i + 1].sub(curve1[i]).mul(2);\r\n        }\r\n        // Compute Q(u), Q'(u) and Q''(u)\r\n        let pt = this.evaluate(3, curve, u),\r\n            pt1 = this.evaluate(2, curve1, u),\r\n            pt2 = this.evaluate(1, curve2, u),\r\n            diff = pt.sub(point),\r\n            df = pt1.dot(pt1) + diff.dot(pt2);\r\n        // Compute f(u) / f'(u)\r\n        if (Math.abs(df) < /*#=*/TOLERANCE)\r\n            return u;\r\n        // u = u - f(u) / f'(u)\r\n        return u - diff.dot(pt1) / df;\r\n    }\r\n\r\n    // Evaluate a bezier curve at a particular parameter value\r\n    evaluate(degree, curve, t) {\r\n        // Copy array\r\n        let tmp = curve.slice();\r\n        // Triangle computation\r\n        for (let i = 1; i <= degree; i++) {\r\n            for (let j = 0; j <= degree - i; j++) {\r\n                tmp[j] = tmp[j].mul(1 - t).add(tmp[j + 1].mul(t));\r\n            }\r\n        }\r\n        return tmp[0];\r\n    }\r\n\r\n    // Assign parameter values to digitized points\r\n    // using relative distances between points.\r\n    chordLengthParameterize(first, last) {\r\n        let u = [0];\r\n        for (let i = first + 1; i <= last; i++) {\r\n            u[i - first] = u[i - first - 1]\r\n                + this.pointArray[i].sub(this.pointArray[i - 1]).mag();\r\n        }\r\n        for (let i = 1, m = last - first; i <= m; i++) {\r\n            u[i] /= u[m];\r\n        }\r\n        return u;\r\n    }\r\n\r\n    // Find the maximum squared distance of digitized points to fitted curve.\r\n    findMaxError(first, last, curve, u) {\r\n        let index = Math.floor((last - first + 1) / 2),\r\n            maxDist = 0;\r\n        for (let i = first + 1; i < last; i++) {\r\n            let P = this.evaluate(3, curve, u[i - first]);\r\n            let v = P.sub(this.pointArray[i]);\r\n            let dist = v.x * v.x + v.y * v.y; // squared\r\n            if (dist >= maxDist) {\r\n                maxDist = dist;\r\n                index = i;\r\n            }\r\n        }\r\n        return {\r\n            error: maxDist,\r\n            index: index\r\n        };\r\n    }\r\n}\r\n['M', 'm', 'L', 'l', 'H', 'h', 'V', 'v', 'C', 'c', 'S', 's', 'Q', 'q', 'T', 't', 'A', 'a', 'Z', 'z'].forEach(function (cmd) {\r\n    RPath.prototype[cmd] = function () {\r\n        var cmds = [cmd];\r\n        for (var i = 0, l = arguments.length; i < l; i++) {\r\n            cmds[i + 1] = arguments[i];\r\n        }\r\n        this._commands.push(cmds);\r\n    };\r\n});\r\n\r\n\r\n"]}