{"version":3,"sources":["file:///E:/cocos/cocos-awesome-tech-solutions/demo/Creator3.6.0_Raphael/assets/raphael/utils/R.length.ts"],"names":[],"mappingssourcesContent":["/**\r\n * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换\r\n */\r\n// var path2curve = require('./R.curve').path2curve;\r\n// var findDotsAtSegment = require('./R.find').findDotsAtSegment;\r\n// \r\n// function base3(t, p1, p2, p3, p4) {\r\n//     var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\r\n//         t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\r\n//     return t * t2 - 3 * p1 + 3 * p2;\r\n// }\r\n// \r\n// function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\r\n//     if (z == null) {\r\n//         z = 1;\r\n//     }\r\n//     z = z > 1 ? 1 : z < 0 ? 0 : z;\r\n//     var z2 = z / 2,\r\n//         n = 12,\r\n//         Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],\r\n//         Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\r\n//         sum = 0;\r\n//     for (var i = 0; i < n; i++) {\r\n//         var ct = z2 * Tvalues[i] + z2,\r\n//             xbase = base3(ct, x1, x2, x3, x4),\r\n//             ybase = base3(ct, y1, y2, y3, y4),\r\n//             comb = xbase * xbase + ybase * ybase;\r\n//         sum += Cvalues[i] * Math.sqrt(comb);\r\n//     }\r\n//     return z2 * sum;\r\n// }\r\n// \r\n// function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\r\n//     if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\r\n//         return;\r\n//     }\r\n//     var t = 1,\r\n//         step = t / 2,\r\n//         t2 = t - step,\r\n//         l,\r\n//         e = .01;\r\n//     l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\r\n//     while (Math.abs(l - ll) > e) {\r\n//         step /= 2;\r\n//         t2 += (l < ll ? 1 : -1) * step;\r\n//         l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\r\n//     }\r\n//     return t2;\r\n// }\r\n// \r\n// \r\n// function getPointAtSegmentLength (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\r\n//     if (!length) {\r\n//         return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\r\n//     } else {\r\n//         return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\r\n//     }\r\n// }\r\n// \r\n// function getLengthFactory (istotal, subpath) {\r\n//     return function (path, length, onlystart) {\r\n//         path = path2curve(path);\r\n//         var x, y, p, l, sp = '', subpaths = {}, point,\r\n//             len = 0;\r\n//         for (var i = 0, ii = path.length; i < ii; i++) {\r\n//             p = path[i];\r\n//             if (p[0] === 'M') {\r\n//                 x = +p[1];\r\n//                 y = +p[2];\r\n//             } else {\r\n//                 l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\r\n//                 if (len + l > length) {\r\n//                     if (subpath && !subpaths.start) {\r\n//                         point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\r\n//                         sp += ['C' + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];\r\n//                         if (onlystart) {return sp;}\r\n//                         subpaths.start = sp;\r\n//                         sp = ['M' + point.x, point.y + 'C' + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\r\n//                         len += l;\r\n//                         x = +p[5];\r\n//                         y = +p[6];\r\n//                         continue;\r\n//                     }\r\n//                     if (!istotal && !subpath) {\r\n//                         point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\r\n//                         return {x: point.x, y: point.y, alpha: point.alpha};\r\n//                     }\r\n//                 }\r\n//                 len += l;\r\n//                 x = +p[5];\r\n//                 y = +p[6];\r\n//             }\r\n//             sp += p.shift() + p;\r\n//         }\r\n//         subpaths.end = sp;\r\n//         point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\r\n//         point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});\r\n//         return point;\r\n//     };\r\n// }\r\n// \r\n// var getTotalLength = getLengthFactory(1);\r\n// var getPointAtLength = getLengthFactory();\r\n// var getSubpathsAtLength = getLengthFactory(0, 1);\r\n// \r\n// /*\\\r\n//  * Raphael.getSubpath\r\n//  [ method ]\r\n//  **\r\n//  * Return subpath of a given path from given length to given length.\r\n//  **\r\n//  > Parameters\r\n//  **\r\n//  - path (string) SVG path string\r\n//  - from (number) position of the start of the segment\r\n//  - to (number) position of the end of the segment\r\n//  **\r\n//  = (string) pathstring for the segment\r\n// \\*/\r\n// function getSubpath (path, from, to) {\r\n//     if (this.getTotalLength(path) - to < 1e-6) {\r\n//         return getSubpathsAtLength(path, from).end;\r\n//     }\r\n//     var a = getSubpathsAtLength(path, to, 1);\r\n//     return from ? getSubpathsAtLength(a, from).end : a;\r\n// }\r\n// \r\n// module.exports = {\r\n//     getTatLen: getTatLen,\r\n//     bezlen: bezlen,\r\n//     getTotalLength: getTotalLength,\r\n//     getPointAtLength: getPointAtLength,\r\n//     getSubpathsAtLength: getSubpathsAtLength,\r\n//     getSubpath: getSubpath\r\n// };\r\n"]}