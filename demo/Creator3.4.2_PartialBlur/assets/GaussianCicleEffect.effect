// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        texSize: {value: [500.0,500.0],editor: {tooltip: "节点尺寸"}}
        radius: {value: 0.0}
        texAlpha: {value: 1.0}
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <cc-global>
  uniform ARGS {
    vec2 texSize;
    float radius;
    float texAlpha;
  };

  in vec4 color;
  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(0, 0, 0, 0);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);

    const mediump float rd = 5.0;
    vec4 col = vec4(0.);
    float sum = 0.0;
   
  
    float circle = radius * radius;
    vec2 center = vec2(0.5);
    float rx = (uv0.x - center.x);
    float ry = uv0.y - center.y;
    float dis = rx * rx + ry * ry;
    // float a = smoothstep(dis, dis - 0.1, circle);
    if (dis <= circle) {
      discard;
    }
    for(float r = -rd; r <= rd; r++) {
        for(float c = -rd; c <= rd; c++) {
          vec2 target = uv0 + vec2(r / texSize.x,c / texSize.y);
          float weight = (rd - abs(r)) * (rd - abs(c));
          col += CCSampleWithAlphaSeparated(cc_spriteTexture,target) * weight;
          sum += weight;
        }
      }
    col = col/sum;
    o = col;
    o.a = texAlpha;
    // }
    // col.a = color.a;
    //  #if USE_TRAMSFORM
    // #endif
    return o;
  }
}%
